image: ubuntu

configuration: Release

#shallow_clone: true

#nuget:
#  account_feed: true
#  project_feed: true

#stack: node 9, python 3.6

dotnet_csproj:
  patch: true
  file: '**\*.csproj'
  version: '{version}'
  package_version: '{version}'
  assembly_version: '{version}'
  file_version: '{version}'
  informational_version: '{version}'

init:
- appveyor version
#- ps: Start-Sleep -s 60
- sh: 'echo CPU cores number:'
- sh: cat /proc/cpuinfo | grep processor | wc -l
- ps: $my_variable = "This is the value of 'my_variable'"
- ps: $my_variable
#- sh: 'echo Computer configuration:'
#- sh: sudo lshw
- pwsh: node -v
#- sudo apt-get update
- sh: printenv
- sh: ls -al /bin
#- cmd: where sss
- cmd: IF DEFINED CI_WINDOWS (ECHO CI_WINDOWS IS defined)
- cmd: IF "%CI_WINDOWS%"=="true" ECHO This is Windows!
- ps: $PSVersionTable.PSVersion | Format-List *
- echo Привет, Аппвейер!
- pwsh: Write-Host "Привет из PowerShell!"
#- pwsh: Start-Process -FilePath https://www.google.com
- echo $NVM_DIR
- node -v
#- npm install karma
- sh: nvm use 9.5.0
- sh: node -v
#- npm install -g @angular/cli
- ps: node -v

install:
- ps: Start-FileDownload 'https://dl.dropboxusercontent.com/s/c1by0uulee6g8th/wxWidgets.7z?dl=0' -FileName wxWidgets.7z
#- cmd: exit /b 2
- cmd: echo Контент! > новый_файл.txt
- pwsh: ./test.ps1
#- appveyor exit
- sh: ls
- cmd: dir
- cd ConsoleApp1
- ps: dir
- sh: ls
- cd ..
- sh: ls
- dir
#- ps: Get-WmiObject -Class Win32_Service -Filter "name='WinRM'"

services:
- mysql
- redis
- mysql

before_build:
#- cat ~/.nuget/NuGet/NuGet.Config
- echo "Before build!"
- cmd: nuget restore
- pwsh: $my_variable = "Set before build!"
- sh: ls -al
- sh: dotnet restore -v normal

build:
  project: UbuntuDotNetCoreTests.sln
  parallel: true
  verbosity: normal
  publish_nuget: true
  publish_nuget_symbols: true
  include_nuget_references: true

after_build:
- ps: '"After build: $my_variable"'

artifacts:
- path: ConsoleApp1
- path: README.md
  name: readme

deploy:

- provider: Environment
  name: Test-webhook
  website_name: Site-A

#- provider: NuGet
#  api_key:
#    secure: 0WipFNKosQmxBGKfuglXCRwTuNG+uUdGFPiAN1MwgtGeBzKJDL3y9/Otorw4DcmA
#  skip_symbols: false
#  artifact: /.*\.nupkg/
  
on_failure:
- echo Failure happened!
#- cmd: dir 2

on_success:
- ps: |
    foreach ($artifactName in $artifacts.keys) {
      $artifacts[$artifactName].url
      $artifacts[$artifactName].path
    }
- pwsh: '"Success!"'
- pwsh: $my_variable
#- cmd: dir 1

on_finish:
- ps: Write-Host "Build is finishing..."
